@partial_raw

    @embed_once ./type.kate

    @embed_once ./../general/default_object.kate

    @define_placeholder(enum,go_enum,enum)
        @runtime.print_string("const (\n")
        @var keys = enum.getKeys()
        @for(@var item,index : keys)
            @runtime.print_char('\t')
            @default_no_raw @var(item.capitalize()) @if(index == 0) string  @endif = "@var(item)" @end_default_no_raw
            @if(index < keys.size() - 1) @runtime.print_char('\n') @endif
        @endfor
        @runtime.print_string("\n)")
    @end_define_placeholder

    @define_placeholder(__object_declaration__,go_struct)
        @default_no_raw
            type @var(object.getName()) struct {
            @var(printMembers())
            }
        @end_default_no_raw
    @end_define_placeholder

    @function capitalizer(param)
        @return param.capitalize()
    @end_function

    @function getKey(param)
        @return param.capitalize().split("_").joinToString("",capitalizer)
    @end_function

    @define_placeholder(__object_member__,go_struct_member)
        @runtime.print_char('\t')
        @var bsonName = object[keys[i]].getMetaProperty("golang-bson-name")
        @if(bsonName == "")
            bsonName = keys[i]
        @endif
        @if(object[keys[i]].getMetaProperty("format") == "binary")
            @default_no_raw
                @var(getKey(keys[i])) multipart.File `json:"@var(keys[i])" bson:"@var(bsonName)"`
                    @var(getKey(keys[i]))Header *multipart.FileHeader
                    @var(getKey(keys[i]))Error  error
            @end_default_no_raw
        @else
            @var golangFormat = object[keys[i]].getMetaProperty("golang-format")
            @if(golangFormat == "")
                golangFormat = getGolangType(object[keys[i]])
            @endif
            @default_no_raw
                @var(getKey(keys[i])) @var(golangFormat) `json:"@var(keys[i])" bson:"@var(bsonName)"`
            @end_default_no_raw
        @endif
    @end_define_placeholder

@end_partial_raw