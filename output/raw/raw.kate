

{
	console : {
		log : log(vararg params : string)
	}
	throw : throw(message : string)
	paths : {
	summary : Status of the api
	path : /status
	operations : {
	security : 
	method : get
	operationId : getApiStatus
	responses : {
	mediaTypes : {
		application/json : {
			schema : {
				version : 0
				status : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : api is working
	statusCode : 200
	example : NO_EXAMPLE_YET
}
}
	description : Information about version of api
	parameters : 
},{
	summary : Request a bearer token
	path : /v1/token
	operations : {
	security : 
	method : post
	operationId : generateToken
	responses : {
	mediaTypes : {
		application/json : {
			schema : {
				request_token : 
				encryption_key : 
				exp_time : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : A request token has been generated
	statusCode : 200
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Bad request parameters
	statusCode : 400
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : A token that already exists is invalid and user must wait
	statusCode : 401
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : error creating request token
	statusCode : 403
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : a token couldn't be created due to an internal error
	statusCode : 500
	example : NO_EXAMPLE_YET
}
}
	description : A bearer token is returned with expiration time
	parameters : 
},{
	summary : Upload a logs file
	path : /v1/logs/upload
	operations : {
	security : {
	requirements : {
		bearerAuth : 
	}
}
	method : post
	requestBody : {
		mediaTypes : {
			application/x-www-form-urlencoded : {
				schema : {
					is_encrypted : false
				}
			}
		}
		getSchemaRefName : (string) -> boolean
		description : Request body for the log file upload request , containing is_encrypted
		required : true
	}
	operationId : uploadLogFile
	responses : {
	mediaTypes : {
		application/json : {
			schema : {
				success : false
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : The file has been uploaded
	statusCode : 200
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Bad request parameters
	statusCode : 400
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Request Token couldn't be authorized
	statusCode : 401
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : File couldn't be uploaded or processed because of an internal error
	statusCode : 500
	example : NO_EXAMPLE_YET
}
}
	description : Takes log file and saves it
	parameters : 
},{
	path : /v1/logs/list
	operations : {
	summary : List logs for a package
	security : {
	requirements : {
		bearerAuth : 
	}
}
	method : post
	requestBody : {
		mediaTypes : {
			application/json : {
				schema : {
					package_name : 
					page : 0
				}
			}
		}
		getSchemaRefName : (string) -> boolean
		description : Lists the logs for the given package and page
		required : false
	}
	description : lists the logs for a package
	operationId : listLogs
	responses : {
	mediaTypes : {
		application/json : {
			schema : {
				logs : {
				notes : 
				log : {
				device_state : {
					__no_nested__ : true
				}
				time_fired : 0
				values : {
					__no_nested__ : true
					__map_of__ : string
				}
				tag : 
				stack_trace : 
				type : 
				message : 
			}
				created_at : 0
				id : 
				state : 
				device : {
					__no_nested__ : true
				}
				app_information : {
					__no_nested__ : true
				}
				user_information : {
					__no_nested__ : true
				}
			}
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Logs are returned
	statusCode : 200
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Error because of bad request
	statusCode : 400
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : Error , request token couldn't be authorized
	statusCode : 401
	example : NO_EXAMPLE_YET
},{
	mediaTypes : {
		application/json : {
			schema : {
				type : 
				message : 
			}
		}
	}
	getSchemaRefName : (string) -> boolean
	description : There was a server error listing the logs
	statusCode : 500
	example : NO_EXAMPLE_YET
}
}
	parameters : 
}
	set_stream : set_stream(path : string)
	schemas : {
	success : false
},{
	type : 
	message : 
},{
	package_name : 
	version_number : 0
	version : 
},{
	user_email : 
	user_id : 
	user_name : 
},{
	platform_type : 
	os_version : 
	os_name : 
	info_map : {
		__no_nested__ : true
		__map_of__ : string
	}
},{
	orientation : 
	top : 0
	left : 0
	bottom : 0
	right : 0
	display_name : 
},{
	storage_name : 
	total_space : 0
	free_space : 0
},{
	is_native_method : false
	method_name : 
	file_name : 
	line_number : 0
	class_name : 
},{
	thread_id : 0
	is_interrupted : false
	thread_name : 
	is_alive : false
	thread_traces : {
	is_native_method : false
	method_name : 
	file_name : 
	line_number : 0
	class_name : 
}
	thread_state : 
	is_daemon : false
	priority : 0
},{
	other_threads : {
	thread_id : 0
	is_interrupted : false
	thread_name : 
	is_alive : false
	thread_traces : {
	is_native_method : false
	method_name : 
	file_name : 
	line_number : 0
	class_name : 
}
	thread_state : 
	is_daemon : false
	priority : 0
}
	current_thread : {
		__no_nested__ : true
	}
	info_map : {
		__no_nested__ : true
		__map_of__ : string
	}
	is_connected_to_internet : false
	time_zone : 
	storage_information : {
	storage_name : 
	total_space : 0
	free_space : 0
}
},{
	device_state : {
		__no_nested__ : true
	}
	time_fired : 0
	values : {
		__no_nested__ : true
		__map_of__ : string
	}
	tag : 
	stack_trace : 
	type : 
	message : 
},{
	notes : 
	log : {
	device_state : {
		__no_nested__ : true
	}
	time_fired : 0
	values : {
		__no_nested__ : true
		__map_of__ : string
	}
	tag : 
	stack_trace : 
	type : 
	message : 
}
	created_at : 0
	id : 
	state : 
	device : {
		__no_nested__ : true
	}
	app_information : {
		__no_nested__ : true
	}
	user_information : {
		__no_nested__ : true
	}
}
	config : {
		console : {
			log : log(vararg params : string)
		}
		throw : throw(message : string)
	}
	info : {
		contact : {}
		description : Logging backend is the backend provider for log requests generated by mobile apps, for crashes and app analytical logging
		termsOfService : https://qawaz.github.io/terms
		title : Logging Backend Schema
		version : 1.0.0
	}
}