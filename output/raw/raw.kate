

{
	console : object = {
		log : (string) -> unit = log(vararg params : string)
	}
	throw : (string) -> unit = throw(message : string)
	paths : list<any> = {
	summary : string = Status of the api
	path : string = /status
	operations : list<object<any>> = {
	security : list<object<any>> = 
	method : string = get
	operationId : string = getApiStatus
	responses : list<object<any>> = {
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				version : int = 0
				status : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = api is working
	statusCode : string = 200
	example : string = NO_EXAMPLE_YET
}
}
	description : string = Information about version of api
	parameters : list<object<any>> = 
},{
	summary : string = Request a bearer token
	path : string = /v1/token
	operations : list<object<any>> = {
	security : list<object<any>> = 
	method : string = post
	operationId : string = generateToken
	responses : list<object<any>> = {
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				request_token : string? = 
				encryption_key : string? = 
				exp_time : string? = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = A request token has been generated
	statusCode : string = 200
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Bad request parameters
	statusCode : string = 400
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = A token that already exists is invalid and user must wait
	statusCode : string = 401
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = error creating request token
	statusCode : string = 403
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = a token couldn't be created due to an internal error
	statusCode : string = 500
	example : string = NO_EXAMPLE_YET
}
}
	description : string = A bearer token is returned with expiration time
	parameters : list<object<any>> = 
},{
	summary : string = Upload a logs file
	path : string = /v1/logs/upload
	operations : list<object<any>> = {
	security : list<object<any>> = {
	requirements : object = {
		bearerAuth : list<string> = 
	}
}
	method : string = post
	requestBody : object = {
		mediaTypes : object = {
			application/x-www-form-urlencoded : object = {
				schema : object = {
					is_encrypted : boolean = false
				}
			}
		}
		getSchemaRefName : (string) -> boolean = (string) -> boolean
		description : string = Request body for the log file upload request , containing is_encrypted
		required : boolean = true
	}
	operationId : string = uploadLogFile
	responses : list<object<any>> = {
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				success : boolean = false
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = The file has been uploaded
	statusCode : string = 200
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Bad request parameters
	statusCode : string = 400
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Request Token couldn't be authorized
	statusCode : string = 401
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = File couldn't be uploaded or processed because of an internal error
	statusCode : string = 500
	example : string = NO_EXAMPLE_YET
}
}
	description : string = Takes log file and saves it
	parameters : list<object<any>> = 
},{
	path : string = /v1/logs/list
	operations : list<object<any>> = {
	summary : string = List logs for a package
	security : list<object<any>> = {
	requirements : object = {
		bearerAuth : list<string> = 
	}
}
	method : string = post
	requestBody : object = {
		mediaTypes : object = {
			application/json : object = {
				schema : object = {
					package_name : string = 
					page : int = 0
				}
			}
		}
		getSchemaRefName : (string) -> boolean = (string) -> boolean
		description : string = Lists the logs for the given package and page
		required : boolean = false
	}
	description : string = lists the logs for a package
	operationId : string = listLogs
	responses : list<object<any>> = {
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				logs : list<any>? = {
				notes : list<any>? = 
				log : list<any>? = {
				device_state : object = {}
				time_fired : long = 0
				values : object = {}
				tag : string = 
				stack_trace : string = 
				type : string = 
				message : string = 
			}
				created_at : int? = 0
				id : string?`golang-format=*primitive.ObjectId,golang-bson-name=_id` = 
				state : string = 
				device : object = {}
				app_information : object = {}
				user_information : object = {}
			}
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Logs are returned
	statusCode : string = 200
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Error because of bad request
	statusCode : string = 400
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = Error , request token couldn't be authorized
	statusCode : string = 401
	example : string = NO_EXAMPLE_YET
},{
	mediaTypes : object = {
		application/json : object = {
			schema : object = {
				type : string = 
				message : string = 
			}
		}
	}
	getSchemaRefName : (string) -> boolean = (string) -> boolean
	description : string = There was a server error listing the logs
	statusCode : string = 500
	example : string = NO_EXAMPLE_YET
}
}
	parameters : list<object<any>> = 
}
	set_stream : (string) -> unit = set_stream(path : string)
	schemas : list<any> = {
	success : boolean = false
},{
	type : string = 
	message : string = 
},{
	package_name : string = 
	version_number : int = 0
	version : string = 
},{
	user_email : string = 
	user_id : string = 
	user_name : string = 
},{
	platform_type : string = 
	os_version : string? = 
	os_name : string = 
	info_map : object = {}
},{
	orientation : string = 
	top : int = 0
	left : int = 0
	bottom : int = 0
	right : int = 0
	display_name : string = 
},{
	storage_name : string = 
	total_space : int = 0
	free_space : int = 0
},{
	is_native_method : boolean = false
	method_name : string = 
	file_name : string? = 
	line_number : int = 0
	class_name : string = 
},{
	thread_id : int = 0
	is_interrupted : boolean = false
	thread_name : string = 
	is_alive : boolean = false
	thread_traces : list<any> = {
	is_native_method : boolean = false
	method_name : string = 
	file_name : string? = 
	line_number : int = 0
	class_name : string = 
}
	thread_state : string = 
	is_daemon : boolean = false
	priority : int = 0
},{
	other_threads : list<any>? = {
	thread_id : int = 0
	is_interrupted : boolean = false
	thread_name : string = 
	is_alive : boolean = false
	thread_traces : list<any> = {
	is_native_method : boolean = false
	method_name : string = 
	file_name : string? = 
	line_number : int = 0
	class_name : string = 
}
	thread_state : string = 
	is_daemon : boolean = false
	priority : int = 0
}
	current_thread : object = {}
	info_map : object = {}
	is_connected_to_internet : boolean? = false
	time_zone : string? = 
	storage_information : list<any> = {
	storage_name : string = 
	total_space : int = 0
	free_space : int = 0
}
},{
	device_state : object = {}
	time_fired : long = 0
	values : object = {}
	tag : string = 
	stack_trace : string = 
	type : string = 
	message : string = 
},{
	notes : list<any>? = 
	log : list<any>? = {
	device_state : object = {}
	time_fired : long = 0
	values : object = {}
	tag : string = 
	stack_trace : string = 
	type : string = 
	message : string = 
}
	created_at : int? = 0
	id : string?`golang-format=*primitive.ObjectId,golang-bson-name=_id` = 
	state : string = 
	device : object = {}
	app_information : object = {}
	user_information : object = {}
}
	config : object = {
		console : object = {
			log : (string) -> unit = log(vararg params : string)
		}
		throw : (string) -> unit = throw(message : string)
		ignore : list<string> = 
	}
	info : object = {
		contact : object = {}
		description : string = Logging backend is the backend provider for log requests generated by mobile apps, for crashes and app analytical logging
		termsOfService : string = https://qawaz.github.io/terms
		title : string = Logging Backend Schema
		version : string = 1.0.0
	}
}